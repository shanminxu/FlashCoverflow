//Animate by Heavenbrook, all rights reserved.package as3.tool {	import flash.display.Sprite;	import flash.display.DisplayObject;	import flash.events.EventDispatcher;	import flash.events.Event;	import fl.motion.easing.*;		public class Animate extends EventDispatcher {		private var target:*;		private var algorithm:Function;		private var duration:uint;		private var startX:Number, startY:Number, startScaleX:Number, startScaleY:Number, startAttrValue1:Number;		private var endX:Number, endY:Number, endScaleX:Number, endScaleY:Number, endAttrValue1:Number;		private var curFrame:uint;		private var attrName1:String="";				public function Animate() {		}				public function moveOffset(mc:DisplayObject, dx:int, dy:int) {			tween(mc, 10, Linear.easeIn, mc.x+dx, mc.y+dy, mc.scaleX, mc.scaleY);		}				public function moveOffsetFit(mc:DisplayObject, dx:Number, dy:Number, frameW:Number, frameH:Number) { // avoid going outside.			var endX:Number, endY:Number;			endX = mc.x + dx;			endY = mc.y + dy;			//if ( endX + mc.width < mc.width / mc.scaleX ) endX = mc.width / mc.scaleX - mc.width;			if ( endX + mc.width < frameW ) endX = frameW - mc.width;			if ( endY + mc.height < frameH ) endY = frameH - mc.height;			if ( endX > 0 ) endX = 0;			if ( endY > 0 ) endY = 0;			moveTo(mc, endX, endY);		}				public function moveTo(mc:DisplayObject, dx:int, dy:int) {			tween(mc, 10, Linear.easeIn, dx, dy, mc.scaleX, mc.scaleY);		}				public function zoomIn(mc:DisplayObject, ds:Number) {			tween(mc, 10, Linear.easeIn, mc.x-(mc.width * ds - mc.width)/2, 										mc.y-(mc.height * ds - mc.height)/2, 										mc.scaleX*ds, mc.scaleY*ds);		}				public function zoomOut(mc:DisplayObject, ds:Number) {			tween(mc, 10, Linear.easeIn, mc.x+(mc.width-mc.width/ds)/2, 										mc.y+(mc.height-mc.height/ds)/2, 										mc.scaleX/ds, mc.scaleY/ds);		}				public function zoomInWheel(mc:DisplayObject, ds:Number) { // centered by mouse			if ( mc.scaleX > 0 ) tween(mc, 2, Linear.easeIn, mc.x-(mc.mouseX*ds-mc.mouseX)*mc.scaleX, 															mc.y-(mc.mouseY*ds-mc.mouseY)*mc.scaleY, 															mc.scaleX*ds, mc.scaleY*ds);			else tween(mc, 2, Linear.easeIn, mc.x+(mc.mouseX*ds-mc.mouseX)*mc.scaleX, 												mc.y-(mc.mouseY*ds-mc.mouseY)*mc.scaleY, 												mc.scaleX*ds, mc.scaleY*ds);		}				public function zoomOutWheel(mc:DisplayObject, ds:Number) { 			var endX:Number, endY:Number;			var endScaleX:Number, endScaleY:Number;						if ( mc.scaleX > 0 ) {				// to avoid going outside				endX = mc.x+(mc.mouseX-mc.mouseX/ds)*mc.scaleX;				endY = mc.y+(mc.mouseY-mc.mouseY/ds)*mc.scaleY;				endScaleX = mc.scaleX/ds;				endScaleY = mc.scaleY/ds;				if ( endX > 0 ) endX = 0;				if ( endY > 0 ) endY = 0;				if ( endScaleX < 1 ) endScaleX = 1;				if ( endScaleY < 1 ) endScaleY = 1;				if ( endX + mc.width / mc.scaleX * endScaleX < mc.width / mc.scaleX ) endX = mc.width / mc.scaleX - mc.width / mc.scaleX * endScaleX;				if ( endY + mc.height /mc.scaleY * endScaleY < mc.height / mc.scaleY ) endY = mc.height / mc.scaleY - mc.height / mc.scaleY * endScaleY;								tween(mc, 2, Linear.easeIn, endX, endY, endScaleX, endScaleY);			}			else tween(mc, 2, Linear.easeIn, mc.x-(mc.mouseX-mc.mouseX/ds)*mc.scaleX, 											mc.y+(mc.mouseY-mc.mouseY/ds)*mc.scaleY, 											mc.scaleX/ds, mc.scaleY/ds);		}				public function tween(target:*, duration:uint, algorithm:Function, endX:Number, endY:Number, endScaleX:Number, endScaleY:Number, 							  attrName1:String="", endAttrValue1:Number=0) {			if ( this.target != null ) this.target.removeEventListener(Event.ENTER_FRAME, enterFrame); // in case last target not finished			this.target = target;			this.algorithm = algorithm;			this.duration = duration;			this.endX = endX;			this.endY = endY;			this.endScaleX = endScaleX;			this.endScaleY = endScaleY;			this.startX = target.x;			this.startY = target.y;			this.startScaleX = target.scaleX;			this.startScaleY = target.scaleY;						if ( attrName1 != "" ) {				this.attrName1 = attrName1;				this.startAttrValue1 = target[attrName1];				this.endAttrValue1 = endAttrValue1;			}						curFrame = 0;			target.removeEventListener(Event.ENTER_FRAME, enterFrame);			target.addEventListener(Event.ENTER_FRAME, enterFrame);		}				public function stopTween():void { if ( target != null ) target.removeEventListener(Event.ENTER_FRAME, enterFrame); }				private function enterFrame(e:Event):void {			// trace(e.target.currentFrame); // e.target should be MovieClip			curFrame++;						target.x = algorithm(curFrame, startX, endX-startX, duration);			target.y = algorithm(curFrame, startY, endY-startY, duration);			target.scaleX = algorithm(curFrame, startScaleX, endScaleX-startScaleX, duration);			target.scaleY = algorithm(curFrame, startScaleY, endScaleY-startScaleY, duration);			if ( attrName1 != "" ) {				target[attrName1] = algorithm(curFrame, startAttrValue1, endAttrValue1-startAttrValue1, duration);			}			dispatchEvent(new PubEvent("tweenChange", {x:target.x, y:target.y}));						if ( curFrame >= duration ) {				target.removeEventListener(Event.ENTER_FRAME, enterFrame);				if ( target is Sprite ) target.stopDrag();				dispatchEvent(new PubEvent("tweenComplete", null));				//return;			}		}	}}